$date
	Wed Nov  3 09:30:13 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module test_bench $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " memwrite $end
$var wire 32 # dataadr [31:0] $end
$var reg 1 $ access_complete $end
$var reg 1 % clock $end
$var reg 1 & printing $end
$var reg 1 ' reset $end
$var reg 1 ( sim_success $end
$var integer 32 ) idx [31:0] $end
$var integer 32 * play_time [31:0] $end
$scope module DUT $end
$var wire 1 % clock $end
$var wire 1 ' reset $end
$var wire 32 + writedata [31:0] $end
$var wire 32 , readdata [31:0] $end
$var wire 32 - pc [31:0] $end
$var wire 1 " memwrite $end
$var wire 32 . instr [31:0] $end
$var wire 32 / dataadr [31:0] $end
$scope module dmem $end
$var wire 1 % clock $end
$var wire 32 0 rd [31:0] $end
$var wire 1 " we $end
$var wire 32 1 wd [31:0] $end
$var wire 32 2 a [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 3 a [5:0] $end
$var wire 32 4 rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 % clock $end
$var wire 32 5 instr [31:0] $end
$var wire 32 6 readdata [31:0] $end
$var wire 1 ' reset $end
$var wire 1 7 zero $end
$var wire 32 8 writedata [31:0] $end
$var wire 1 9 sig_ori $end
$var wire 1 : sig_lui $end
$var wire 1 ; sig_jr $end
$var wire 1 < sig_jal $end
$var wire 1 = regwrite $end
$var wire 1 > regdst $end
$var wire 1 ? pcsrc $end
$var wire 32 @ pc [31:0] $end
$var wire 1 " memwrite $end
$var wire 1 A memtoreg $end
$var wire 1 B jump $end
$var wire 1 C alusrc $end
$var wire 32 D aluout [31:0] $end
$var wire 3 E alucontrol [2:0] $end
$scope module CU $end
$var wire 6 F funct [5:0] $end
$var wire 6 G op [5:0] $end
$var wire 1 ? pcsrc $end
$var wire 1 7 zero $end
$var wire 1 9 sig_ori $end
$var wire 1 : sig_lui $end
$var wire 1 ; sig_jr $end
$var wire 1 < sig_jal $end
$var wire 1 = regwrite $end
$var wire 1 > regdst $end
$var wire 1 " memwrite $end
$var wire 1 A memtoreg $end
$var wire 1 B jump $end
$var wire 1 H branch $end
$var wire 1 C alusrc $end
$var wire 2 I aluop [1:0] $end
$var wire 3 J alucontrol [2:0] $end
$scope module AD $end
$var wire 6 K funct [5:0] $end
$var wire 2 L aluop [1:0] $end
$var reg 3 M alucontrol [2:0] $end
$upscope $end
$scope module MD $end
$var wire 6 N funct [5:0] $end
$var wire 6 O op [5:0] $end
$var wire 1 9 sig_ori $end
$var wire 1 : sig_lui $end
$var wire 1 ; sig_jr $end
$var wire 1 < sig_jal $end
$var wire 1 = regwrite $end
$var wire 1 > regdst $end
$var wire 1 " memwrite $end
$var wire 1 A memtoreg $end
$var wire 1 B jump $end
$var wire 1 H branch $end
$var wire 1 C alusrc $end
$var wire 2 P aluop [1:0] $end
$var reg 13 Q controls [12:0] $end
$upscope $end
$upscope $end
$scope module DP $end
$var wire 3 R alucontrol [2:0] $end
$var wire 1 C alusrc $end
$var wire 1 % clock $end
$var wire 32 S instr [31:0] $end
$var wire 1 B jump $end
$var wire 1 A memtoreg $end
$var wire 1 ? pcsrc $end
$var wire 32 T readdata [31:0] $end
$var wire 1 > regdst $end
$var wire 1 = regwrite $end
$var wire 1 ' reset $end
$var wire 1 < sig_jal $end
$var wire 1 ; sig_jr $end
$var wire 1 : sig_lui $end
$var wire 1 9 sig_ori $end
$var wire 32 U zero_full [31:0] $end
$var wire 32 V zeroXimm [31:0] $end
$var wire 1 7 zero $end
$var wire 5 W writereg [4:0] $end
$var wire 32 X writedata [31:0] $end
$var wire 32 Y write_to_rf [31:0] $end
$var wire 32 Z srcb [31:0] $end
$var wire 32 [ srca [31:0] $end
$var wire 32 \ signimmsh [31:0] $end
$var wire 32 ] signimm [31:0] $end
$var wire 32 ^ result [31:0] $end
$var wire 32 _ pcplus4 [31:0] $end
$var wire 32 ` pcnextbr [31:0] $end
$var wire 32 a pcnext [31:0] $end
$var wire 32 b pcbranch [31:0] $end
$var wire 32 c pc [31:0] $end
$var wire 32 d jr_mux_out [31:0] $end
$var wire 5 e from_wrmux [4:0] $end
$var wire 32 f from_lui_mux [31:0] $end
$var wire 32 g extend_mux_out [31:0] $end
$var wire 32 h aluout [31:0] $end
$scope module ALU $end
$var wire 3 i sel [2:0] $end
$var wire 32 j b [31:0] $end
$var wire 32 k a [31:0] $end
$var reg 32 l out [31:0] $end
$var reg 1 7 zero $end
$upscope $end
$scope module RF $end
$var wire 1 % clock $end
$var wire 5 m ra1 [4:0] $end
$var wire 5 n ra2 [4:0] $end
$var wire 1 = we3 $end
$var wire 32 o wd3 [31:0] $end
$var wire 5 p wa3 [4:0] $end
$var wire 32 q rd2 [31:0] $end
$var wire 32 r rd1 [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 s a [15:0] $end
$var wire 32 t y [31:0] $end
$upscope $end
$scope module ZE $end
$var wire 16 u a [15:0] $end
$var wire 32 v y [31:0] $end
$upscope $end
$scope module ZF $end
$var wire 16 w a [15:0] $end
$var wire 32 x y [31:0] $end
$upscope $end
$scope module extend_mux $end
$var wire 32 y d0 [31:0] $end
$var wire 32 z d1 [31:0] $end
$var wire 1 9 s $end
$var wire 32 { y [31:0] $end
$upscope $end
$scope module immsh $end
$var wire 32 | a [31:0] $end
$var wire 32 } y [31:0] $end
$upscope $end
$scope module jr_mux $end
$var wire 32 ~ d1 [31:0] $end
$var wire 1 ; s $end
$var wire 32 !" y [31:0] $end
$var wire 32 "" d0 [31:0] $end
$upscope $end
$scope module lui_mux $end
$var wire 32 #" d1 [31:0] $end
$var wire 1 : s $end
$var wire 32 $" y [31:0] $end
$var wire 32 %" d0 [31:0] $end
$upscope $end
$scope module mux_rf_write $end
$var wire 32 &" d0 [31:0] $end
$var wire 1 < s $end
$var wire 32 '" y [31:0] $end
$var wire 32 (" d1 [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 )" b [31:0] $end
$var wire 32 *" y [31:0] $end
$var wire 32 +" a [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 ," a [31:0] $end
$var wire 32 -" b [31:0] $end
$var wire 32 ." y [31:0] $end
$upscope $end
$scope module pcbrmux $end
$var wire 32 /" d0 [31:0] $end
$var wire 32 0" d1 [31:0] $end
$var wire 1 ? s $end
$var wire 32 1" y [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 2" d0 [31:0] $end
$var wire 32 3" d1 [31:0] $end
$var wire 1 B s $end
$var wire 32 4" y [31:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 % clock $end
$var wire 32 5" d [31:0] $end
$var wire 1 ' reset $end
$var reg 32 6" q [31:0] $end
$upscope $end
$scope module resmux $end
$var wire 32 7" d0 [31:0] $end
$var wire 32 8" d1 [31:0] $end
$var wire 1 A s $end
$var wire 32 9" y [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 :" d0 [31:0] $end
$var wire 32 ;" d1 [31:0] $end
$var wire 1 C s $end
$var wire 32 <" y [31:0] $end
$upscope $end
$scope module wrmux $end
$var wire 5 =" d0 [4:0] $end
$var wire 5 >" d1 [4:0] $end
$var wire 1 > s $end
$var wire 5 ?" y [4:0] $end
$upscope $end
$scope module wrmux_jal $end
$var wire 5 @" d0 [4:0] $end
$var wire 5 A" d1 [4:0] $end
$var wire 1 < s $end
$var wire 5 B" y [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 B"
b11111 A"
b100 @"
b100 ?"
b0 >"
b100 ="
b10 <"
b10 ;"
bx :"
b10 9"
bx 8"
b10 7"
b0 6"
b100 5"
b100 4"
b100000000000000001000 3"
b100 2"
b100 1"
b1100 0"
b100 /"
b1100 ."
b1000 -"
b100 ,"
b0 +"
b100 *"
b100 )"
b100 ("
b10 '"
b10 &"
b10 %"
b10 $"
b100000000000000000 #"
b100 ""
b100 !"
b0 ~
b1000 }
b10 |
b10 {
b10 z
b10 y
b100000000000000000 x
b10 w
b10 v
b10 u
b10 t
b10 s
b0 r
bx q
b100 p
b10 o
b100 n
b0 m
b10 l
b0 k
b10 j
b10 i
b10 h
b10 g
b10 f
b100 e
b100 d
b0 c
b1100 b
b100 a
b100 `
b100 _
b10 ^
b10 ]
b1000 \
b0 [
b10 Z
b10 Y
bx X
b100 W
b10 V
b100000000000000000 U
bx T
b100000000001000000000000000010 S
b10 R
b1010000000000 Q
b0 P
b1000 O
b10 N
b10 M
b0 L
b10 K
b10 J
b0 I
0H
b1000 G
b10 F
b10 E
b10 D
1C
0B
0A
b0 @
0?
0>
1=
0<
0;
0:
09
bx 8
07
bx 6
b100000000001000000000000000010 5
b100000000001000000000000000010 4
b0 3
b10 2
bx 1
bx 0
b10 /
b100000000001000000000000000010 .
b0 -
bx ,
bx +
b0 *
b1 )
0(
1'
0&
0%
0$
b10 #
0"
bx !
$end
#50
b10 !
b10 +
b10 1
b10 8
b10 X
b10 q
b10 :"
1%
#100
0%
0'
#102
1&
#150
b11 Y
b11 o
b11 '"
b11 f
b11 $"
b11 &"
b11 ^
b11 %"
b11 9"
b11 #
b11 /
b11 2
b11 D
b11 h
b11 l
b11 7"
b101 W
b101 p
b101 B"
b11 Z
b11 j
b11 <"
b1000 a
b1000 4"
b1000 5"
bx !
bx +
bx 1
bx 8
bx X
bx q
bx :"
b101 e
b101 ?"
b101 @"
b11 g
b11 {
b11 ;"
b1100 \
b1100 }
b1100 -"
b1000 d
b1000 !"
b1000 2"
b11 F
b11 K
b11 N
b101000000000000001100 3"
b101 n
b101 ="
b11 ]
b11 t
b11 y
b11 |
b11 s
b11 V
b11 v
b11 z
b11 u
b110000000000000000 U
b110000000000000000 x
b110000000000000000 #"
b11 w
b1000 `
b1000 ""
b1000 1"
b100000000001010000000000000011 .
b100000000001010000000000000011 4
b100000000001010000000000000011 5
b100000000001010000000000000011 S
b1 3
b10100 b
b10100 ."
b10100 0"
b1000 _
b1000 ("
b1000 *"
b1000 ,"
b1000 /"
b100 -
b100 @
b100 c
b100 +"
b100 6"
1%
#200
0%
#201
b10 )
#250
17
0C
1B
1<
b1000000010001 Q
b1100 Y
b1100 o
b1100 '"
b0 f
b0 $"
b0 &"
b0 ^
b0 %"
b0 9"
b0 #
b0 /
b0 2
b0 D
b0 h
b0 l
b0 7"
b11111 W
b11111 p
b11111 B"
b0 Z
b0 j
b0 <"
b10100 a
b10100 4"
b10100 5"
b0 e
b0 ?"
b0 @"
b101 g
b101 {
b101 ;"
b10100 \
b10100 }
b10100 -"
b1100 d
b1100 !"
b1100 2"
b11 G
b11 O
b101 F
b101 K
b101 N
b10100 3"
b0 n
b0 ="
b101 ]
b101 t
b101 y
b101 |
b101 s
b101 V
b101 v
b101 z
b101 u
b1010000000000000000 U
b1010000000000000000 x
b1010000000000000000 #"
b101 w
b0 !
b0 +
b0 1
b0 8
b0 X
b0 q
b0 :"
b1100 `
b1100 ""
b1100 1"
b1100000000000000000000000101 .
b1100000000000000000000000101 4
b1100000000000000000000000101 5
b1100000000000000000000000101 S
b10 3
b100000 b
b100000 ."
b100000 0"
b1100 _
b1100 ("
b1100 *"
b1100 ,"
b1100 /"
b1000 -
b1000 @
b1000 c
b1000 +"
b1000 6"
1%
#300
0%
#301
b11 )
#350
b1000 W
b1000 p
b1000 B"
1>
b10 I
b10 L
b10 P
0B
0<
b1100001000000 Q
b101 f
b101 $"
b101 &"
b101 ^
b101 %"
b101 9"
07
b101 #
b101 /
b101 2
b101 D
b101 h
b101 l
b101 7"
b11 Z
b11 j
b11 <"
b11000 a
b11000 4"
b11000 5"
b10 [
b10 k
b10 r
b10 ~
b11 !
b11 +
b11 1
b11 8
b11 X
b11 q
b11 :"
b1000 e
b1000 ?"
b1000 @"
b100000000100000 g
b100000000100000 {
b100000000100000 ;"
b10000000010000000 \
b10000000010000000 }
b10000000010000000 -"
b11000 d
b11000 !"
b11000 2"
b0 G
b0 O
b100000 F
b100000 K
b100000 N
b10000101010000000010000000 3"
b100 m
b101 n
b101 ="
b1000 >"
b100000000100000 ]
b100000000100000 t
b100000000100000 y
b100000000100000 |
b100000000100000 s
b100000000100000 V
b100000000100000 v
b100000000100000 z
b100000000100000 u
b1000000001000000000000000000000 U
b1000000001000000000000000000000 x
b1000000001000000000000000000000 #"
b100000000100000 w
b11000 `
b11000 ""
b11000 1"
b101 Y
b101 o
b101 '"
b100001010100000000100000 .
b100001010100000000100000 4
b100001010100000000100000 5
b100001010100000000100000 S
b101 3
b10000000010011000 b
b10000000010011000 ."
b10000000010011000 0"
b11000 _
b11000 ("
b11000 *"
b11000 ,"
b11000 /"
b10100 -
b10100 @
b10100 c
b10100 +"
b10100 6"
1%
#400
0%
#401
b100 )
#450
0>
1C
b0 I
b0 L
b0 P
b10 E
b10 J
b10 M
b10 R
b10 i
b1010000000000 Q
b1 Y
b1 o
b1 '"
b1 f
b1 $"
b1 &"
b1 ^
b1 %"
b1 9"
b1 #
b1 /
b1 2
b1 D
b1 h
b1 l
b1 7"
b1 Z
b1 j
b1 <"
b1001 W
b1001 p
b1001 B"
b11100 a
b11100 4"
b11100 5"
b0 [
b0 k
b0 r
b0 ~
bx !
bx +
bx 1
bx 8
bx X
bx q
bx :"
b1001 e
b1001 ?"
b1001 @"
b1 g
b1 {
b1 ;"
b100 \
b100 }
b100 -"
b11100 d
b11100 !"
b11100 2"
b1000 G
b1000 O
b1 F
b1 K
b1 N
b1001000000000000000100 3"
b0 m
b1001 n
b1001 ="
b0 >"
b1 ]
b1 t
b1 y
b1 |
b1 s
b1 V
b1 v
b1 z
b1 u
b10000000000000000 U
b10000000000000000 x
b10000000000000000 #"
b1 w
b11100 `
b11100 ""
b11100 1"
b100000000010010000000000000001 .
b100000000010010000000000000001 4
b100000000010010000000000000001 5
b100000000010010000000000000001 S
b110 3
b100000 b
b100000 ."
b100000 0"
b11100 _
b11100 ("
b11100 *"
b11100 ,"
b11100 /"
b11000 -
b11000 @
b11000 c
b11000 +"
b11000 6"
1%
#500
0%
#501
b101 )
#550
b101 E
b101 J
b101 M
b101 R
b101 i
1>
0C
b10 I
b10 L
b10 P
b1100001000000 Q
b1010 Y
b1010 o
b1010 '"
b1010 f
b1010 $"
b1010 &"
b1010 ^
b1010 %"
b1010 9"
b1010 #
b1010 /
b1010 2
b1010 D
b1010 h
b1010 l
b1010 7"
b10 W
b10 p
b10 B"
b101 Z
b101 j
b101 <"
b100000 a
b100000 4"
b100000 5"
b1 [
b1 k
b1 r
b1 ~
b10 e
b10 ?"
b10 @"
b1000000000100 g
b1000000000100 {
b1000000000100 ;"
b100000000010000 \
b100000000010000 }
b100000000010000 -"
b100000 d
b100000 !"
b100000 2"
b0 G
b0 O
b100 F
b100 K
b100 N
b100101000000100000000010000 3"
b1001 m
b1000 n
b1000 ="
b10 >"
b1000000000100 ]
b1000000000100 t
b1000000000100 y
b1000000000100 |
b1000000000100 s
b1000000000100 V
b1000000000100 v
b1000000000100 z
b1000000000100 u
b10000000001000000000000000000 U
b10000000001000000000000000000 x
b10000000001000000000000000000 #"
b1000000000100 w
b101 !
b101 +
b101 1
b101 8
b101 X
b101 q
b101 :"
b100000 `
b100000 ""
b100000 1"
b1001010000001000000000100 .
b1001010000001000000000100 4
b1001010000001000000000100 5
b1001010000001000000000100 S
b111 3
b100000000110000 b
b100000000110000 ."
b100000000110000 0"
b100000 _
b100000 ("
b100000 *"
b100000 ,"
b100000 /"
b11100 -
b11100 @
b11100 c
b11100 +"
b11100 6"
1%
#600
0%
#601
b110 )
#650
0=
0>
1;
bx E
bx J
bx M
bx R
bx i
b1000100 Q
b0 Y
b0 o
b0 '"
b0 f
b0 $"
b0 &"
b0 ^
b0 %"
b0 9"
b0 #
b0 /
b0 2
b0 D
b0 h
b0 l
b0 7"
b0 Z
b0 j
b0 <"
b0 W
b0 p
b0 B"
b1100 a
b1100 4"
b1100 5"
b1100 [
b1100 k
b1100 r
b1100 ~
b0 !
b0 +
b0 1
b0 8
b0 X
b0 q
b0 :"
b0 e
b0 ?"
b0 @"
b1000 g
b1000 {
b1000 ;"
b100000 \
b100000 }
b100000 -"
b1100 d
b1100 !"
b1100 2"
b1000 F
b1000 K
b1000 N
b1111100000000000000000100000 3"
b11111 m
b0 n
b0 ="
b0 >"
b1000 ]
b1000 t
b1000 y
b1000 |
b1000 s
b1000 V
b1000 v
b1000 z
b1000 u
b10000000000000000000 U
b10000000000000000000 x
b10000000000000000000 #"
b1000 w
b100100 `
b100100 ""
b100100 1"
b11111000000000000000001000 .
b11111000000000000000001000 4
b11111000000000000000001000 5
b11111000000000000000001000 S
b1000 3
b1000100 b
b1000100 ."
b1000100 0"
b100100 _
b100100 ("
b100100 *"
b100100 ,"
b100100 /"
b100000 -
b100000 @
b100000 c
b100000 +"
b100000 6"
1%
#700
0%
#701
b111 )
#750
17
b10 E
b10 J
b10 M
b10 R
b10 i
b0 I
b0 L
b0 P
1B
0;
b10000 Q
b100100 a
b100100 4"
b100100 5"
b10000 d
b10000 !"
b10000 2"
b0 [
b0 k
b0 r
b0 ~
b1001 g
b1001 {
b1001 ;"
b100100 \
b100100 }
b100100 -"
b10 G
b10 O
b1001 F
b1001 K
b1001 N
b100100 3"
b0 m
b1001 ]
b1001 t
b1001 y
b1001 |
b1001 s
b1001 V
b1001 v
b1001 z
b1001 u
b10010000000000000000 U
b10010000000000000000 x
b10010000000000000000 #"
b1001 w
b10000 `
b10000 ""
b10000 1"
b1000000000000000000000001001 .
b1000000000000000000000001001 4
b1000000000000000000000001001 5
b1000000000000000000000001001 S
b11 3
b110100 b
b110100 ."
b110100 0"
b10000 _
b10000 ("
b10000 *"
b10000 ,"
b10000 /"
b1100 -
b1100 @
b1100 c
b1100 +"
b1100 6"
1%
#800
0%
#801
b1000 )
#850
1C
1"
0B
b10100000000 Q
b1010000 Y
b1010000 o
b1010000 '"
b1010000 f
b1010000 $"
b1010000 &"
b1010000 ^
b1010000 %"
b1010000 9"
07
b1010000 #
b1010000 /
b1010000 2
b1010000 D
b1010000 h
b1010000 l
b1010000 7"
b1010000 Z
b1010000 j
b1010000 <"
b10 W
b10 p
b10 B"
b101000 a
b101000 4"
b101000 5"
b1010 !
b1010 +
b1010 1
b1010 8
b1010 X
b1010 q
b1010 :"
b10 e
b10 ?"
b10 @"
b1010000 g
b1010000 {
b1010000 ;"
b101000000 \
b101000000 }
b101000000 -"
b101000 d
b101000 !"
b101000 2"
b101011 G
b101011 O
b10000 F
b10000 K
b10000 N
b10000000000101000000 3"
b10 n
b10 ="
b1010000 ]
b1010000 t
b1010000 y
b1010000 |
b1010000 s
b1010000 V
b1010000 v
b1010000 z
b1010000 u
b10100000000000000000000 U
b10100000000000000000000 x
b10100000000000000000000 #"
b1010000 w
b101000 `
b101000 ""
b101000 1"
b10101100000000100000000001010000 .
b10101100000000100000000001010000 4
b10101100000000100000000001010000 5
b10101100000000100000000001010000 S
b1001 3
b101101000 b
b101101000 ."
b101101000 0"
b101000 _
b101000 ("
b101000 *"
b101000 ,"
b101000 /"
b100100 -
b100100 @
b100100 c
b100100 +"
b100100 6"
1%
#900
1$
1(
0%
#901
b11111111111111111111111111111111 *
b1001 )
